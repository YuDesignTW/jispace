/**
 * JI Space預訂系统 Google Apps Script
 * 
 * 此脚本用于处理民宿預訂系统与Google Sheets的交互
 * 包括：
 * 1. 查询房型和可用性信息
 * 2. 提交新預訂
 * 3. 生成简单的报表和统计
 */

// 獲取房间信息表和預訂表
const SPREADSHEET_ID = '1-pSm6DQ_zK1CsHt_bMpIqWNcXV3SUI3Dg77lRivlszI';
const ROOM_INFO_SHEET_NAME = 'RoomInfo';
const BOOKINGS_SHEET_NAME = 'Bookings';
const AVAILABILITY_SHEET_NAME = 'Availability';
const COUPONS_SHEET_NAME = 'Coupons';

/**
 * 处理Web请求的主函數
 */
function doGet(e) {
  // 设置CORS headers，允许来自任何来源的请求
  const output = ContentService.createTextOutput();
  output.setMimeType(ContentService.MimeType.JSON);
  
  // 解析请求参數
  const params = e.parameter;
  const action = params.action;
  
  // 根據请求的操作类型执行相应的函數
  let result = {};
  
  try {
    switch(action) {
      case 'getRoomInfo':
        result = getRoomInfo();
        break;
      case 'checkAvailability':
        result = checkAvailability(params.checkIn, params.checkOut);
        break;
      case 'checkAvailabilityCalendar':
        result = checkAvailabilityCalendar(params.checkIn, params.checkOut);
        break;
      case 'getBooking':
        result = getBooking(params.bookingId);
        break;
      case 'validateCoupon':
        result = validateCoupon(params.couponCode);
        break;
      default:
        result = { error: '無效的操作請求' };
    }
  } catch(error) {
    result = { error: error.toString() };
    Logger.log('doGet處理錯誤: ' + error.toString());
  }
  
  // 返回JSON结果
  const jsonOutput = JSON.stringify(result);
  output.setContent(jsonOutput);
  
  // 記錄最终返回的结果，用于调试
  Logger.log('API返回结果: ' + jsonOutput);
  
  return output;
}

/**
 * 处理POST请求（用于提交預訂）
 */
function doPost(e) {
  // 设置CORS headers
  const output = ContentService.createTextOutput();
  output.setMimeType(ContentService.MimeType.JSON);
  
  let result = {};
  
  try {
    // 解析请求参數
    const params = JSON.parse(e.postData.contents);
    
    // 验证必要字段是否存在
    if(!params.action) {
      throw new Error('缺少操作類型');
    }
    
    // 根據请求的操作类型执行相应的函數
    switch(params.action) {
      case 'submitBooking':
        result = submitBooking(params);
        break;
      case 'updateBooking':
        result = updateBooking(params);
        break;
      case 'cancelBooking':
        result = cancelBooking(params.bookingId);
        break;
      default:
        result = { error: '無效的操作請求' };
    }
  } catch(error) {
    result = { error: error.toString() };
    Logger.log('doPost處理錯誤: ' + error.toString());
  }
  
  // 返回JSON结果
  const jsonOutput = JSON.stringify(result);
  output.setContent(jsonOutput);
  
  // 記錄最终返回的结果，用于调试
  Logger.log('API返回结果: ' + jsonOutput);
  
  return output;
}

/**
 * 獲取所有房型信息
 */
function getRoomInfo() {
  try {
    Logger.log('開始獲取房型類型');
    
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(ROOM_INFO_SHEET_NAME);
    if (!sheet) {
      Logger.log('找不到房型信息表: ' + ROOM_INFO_SHEET_NAME);
      return { success: false, error: '找不到房型信息表' };
    }
    
    const data = sheet.getDataRange().getValues();
    Logger.log('獲取到的房型行數: ' + data.length);
    
    if (data.length <= 1) {
      Logger.log('房型表為空');
      return { success: true, roomTypes: [] };
    }
    
    // 提取表头和數據行
    const headers = data[0];
    const rows = data.slice(1);
    
    Logger.log('房型表头: ' + JSON.stringify(headers));
    
    // 将數據轉换為对象數组
    const roomTypes = rows.map(row => {
      const room = {};
      headers.forEach((header, index) => {
        room[header] = row[index];
      });
      return room;
    });
    
    Logger.log('轉换后房型數: ' + roomTypes.length);
    
    // 附加一些调试信息
    roomTypes.forEach((room, index) => {
      Logger.log(`房型 ${index+1}: ID=${room.roomId || room.id}, 名称=${room.roomName || room.name}`);
    });
    
    return { success: true, roomTypes };
  } catch (error) {
    Logger.log('獲取房型信息時出錯: ' + error.toString());
    return { success: false, error: '獲取房型信息時出錯: ' + error.toString() };
  }
}

/**
 * 檢查指定日期范围内的房型可用性
 */
function checkAvailability(checkInDate, checkOutDate) {
  // 验证日期
  if(!checkInDate || !checkOutDate) {
    Logger.log('入住或退房日期為空');
    return { error: '入住和退房日期不能為空' };
  }
  
  try {
    // 详细的日志输出用于调试
    Logger.log('檢查可用性: 入住=' + checkInDate + '(' + typeof checkInDate + '), 退房=' + checkOutDate + '(' + typeof checkOutDate + ')');
    
    // 嘗试多种方式轉换日期格式
    let checkIn, checkOut;
    
    try {
      // 首先嘗试標準的Date对象構造
      checkIn = new Date(checkInDate);
      checkOut = new Date(checkOutDate);
      
      // 验证日期是否有效
      if(isNaN(checkIn.getTime()) || isNaN(checkOut.getTime())) {
        Logger.log('標準日期構造失败，嘗试解析日期字符串');
        
        // 嘗试解析YYYY-MM-DD格式
        if(typeof checkInDate === 'string' && checkInDate.includes('-')) {
          const parts = checkInDate.split('-');
          if(parts.length === 3) {
            checkIn = new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
          }
        }
        
        if(typeof checkOutDate === 'string' && checkOutDate.includes('-')) {
          const parts = checkOutDate.split('-');
          if(parts.length === 3) {
            checkOut = new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
          }
        }
      }
    } catch(e) {
      Logger.log('日期轉换出錯: ' + e.toString());
      return { error: '日期格式無效: ' + e.toString() };
    }
    
    // 再次验证日期
    if(isNaN(checkIn.getTime()) || isNaN(checkOut.getTime())) {
      Logger.log('無法解析有效日期');
      return { error: '無法解析有效日期' };
    }
    
    Logger.log('轉换后日期: 入住=' + checkIn + ', 退房=' + checkOut);
    
    // 獲取房型信息
    const roomInfoResult = getRoomInfo();
    if(!roomInfoResult.success || !roomInfoResult.roomTypes) {
      Logger.log('獲取房型信息失败: ' + JSON.stringify(roomInfoResult));
      return { error: '獲取房型信息失败' };
    }
    
    const roomInfo = roomInfoResult.roomTypes;
    Logger.log('獲取到房型信息: ' + JSON.stringify(roomInfo));
    
    // 獲取可用性表
    const availabilitySheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(AVAILABILITY_SHEET_NAME);
    if(!availabilitySheet) {
      Logger.log('找不到可用性表: ' + AVAILABILITY_SHEET_NAME);
      return { error: '找不到可用性表' };
    }
    
    const availabilityData = availabilitySheet.getDataRange().getValues();
    
    // 提取表头和數據行
    const headers = availabilityData[0];
    const rows = availabilityData.slice(1);
    
    Logger.log('可用性表头: ' + JSON.stringify(headers));
    Logger.log('可用性數據行數: ' + rows.length);
    
    // 查找日期范围内的可用性
    const availability = [];
    
    // 遍期所有房型
    roomInfo.forEach(room => {
      const roomId = room.roomId || room.id;
      const roomName = room.roomName || room.name;
      const roomPrice = room.price;
      const roomMaxGuests = room.maxGuests;
      
    // 添加日誌
      Logger.log(`處理房型: ID=${roomId}, 名稱=${roomName}, 價格=${roomPrice}, 容量=${roomMaxGuests}`);
      

      // 用于该房型的可用情况
      let isAvailable = true;
      let minAvailable = Infinity;
      
      // 檢查日期范围内每一天的可用情况
      for(let d = new Date(checkIn); d < checkOut; d.setDate(d.getDate() + 1)) {
        const dateString = Utilities.formatDate(d, 'GMT+8', 'yyyy-MM-dd');
        Logger.log(`檢查日期 ${dateString} 的 ${roomId} 房型可用性`);
        
        // 该日期的可用房间數
        let availableCount = 0;
        
        // 在表格中查找当前日期的行
        let found = false;
        
        // 查找日期行
        for(let i = 0; i < rows.length; i++) {
          const rowDate = rows[i][0];
          
          // 处理不同格式的日期
          let rowDateStr = '';
          
          // 日期可能是Date对象
          if(rowDate instanceof Date) {
            rowDateStr = Utilities.formatDate(rowDate, 'GMT+8', 'yyyy-MM-dd');
          } 
          // 日期可能是字符串
          else if(typeof rowDate === 'string') {
            // 如果是YYYY-MM-DD格式
            if(rowDate.includes('-')) {
              rowDateStr = rowDate;
            } else {
              try {
                const parsedDate = new Date(rowDate);
                if(!isNaN(parsedDate.getTime())) {
                  rowDateStr = Utilities.formatDate(parsedDate, 'GMT+8', 'yyyy-MM-dd');
                }
              } catch(e) {
                continue;
              }
            }
          }
          
          Logger.log(`比较: 表格日期=${rowDateStr} vs 目標日期=${dateString}`);
          
          // 找到匹配的日期行
          if(rowDateStr === dateString) {
            found = true;
            
            // 獲取该房型列的索引
            const columnIndex = headers.indexOf(roomId);
            if(columnIndex !== -1) {
              availableCount = rows[i][columnIndex];
              
              // 轉换為數字
              if(typeof availableCount !== 'number') {
                availableCount = parseInt(availableCount) || 0;
              }
              
              Logger.log(`找到房型 ${roomId} 在日期 ${dateString} 的可用數量: ${availableCount}`);
            } else {
              Logger.log(`找不到房型 ${roomId} 的列`);
              availableCount = 0;
            }
            
            break;
          }
        }
        
        // 如果在表格中找不到该日期，默認為0可用
        if(!found) {
          Logger.log(`在可用性表中找不到日期 ${dateString}，默認為0可用`);
          availableCount = 0;
        }
        
        // 更新该房型在整個日期范围内的最小可用數量
        minAvailable = Math.min(minAvailable, availableCount);
        
        // 如果某一天没有可用房间，则整個日期范围都不可用
        if(availableCount <= 0) {
          isAvailable = false;
        }
      }
      
      // 如果minAvailable仍為Infinity，表示没有找到任何日期行，设為0
      if(minAvailable === Infinity) {
        minAvailable = 0;
        isAvailable = false;
      }
      
      // 添加到结果
      availability.push({
        id: roomId,
        name: roomName,
        price: roomPrice,
        maxGuests: roomMaxGuests,
        available: minAvailable,
        isAvailable: isAvailable
      });
    });
    
    Logger.log('最终可用房型數: ' + availability.length);
    if(availability.length === 0) {
      Logger.log('警告: 没有找到可用房型!');
    }
    
    return { 
      success: true, 
      checkIn: checkInDate, 
      checkOut: checkOutDate, 
      availability: availability 
    };
  } catch(error) {
    Logger.log('檢查可用性時出錯: ' + error.toString());
    return { 
      success: false,
      error: '檢查可用性時出錯: ' + error.toString(),
      availability: []
    };
  }
}

/**
 * 驗證優惠券
 * @param {string} couponCode - 優惠券代碼
 */
function validateCoupon(couponCode) {
  try {
    if (!couponCode) {
      return { success: false, error: '請輸入優惠券代碼' };
    }

    // 獲取優惠券表
    const couponSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(COUPONS_SHEET_NAME);
    if (!couponSheet) {
      return { success: false, error: '優惠券系統暫時無法使用' };
    }

    const data = couponSheet.getDataRange().getValues();
    if (data.length <= 1) {
      return { success: false, error: '找不到優惠券' };
    }

    const headers = data[0];
    const rows = data.slice(1);

    // 查找優惠券
    const couponRow = rows.find(row => {
      const couponCodeValue = row[headers.indexOf('coupon code')] || row[headers.indexOf('couponCode')];
      return couponCodeValue && couponCodeValue.toString().toLowerCase() === couponCode.toLowerCase();
    });

    if (!couponRow) {
      return { success: false, error: '無效的優惠券代碼' };
    }

    // 檢查優惠券是否啟用
    const activeIndex = headers.indexOf('active');
    const isActive = couponRow[activeIndex];
    if (isActive !== 'Y' && isActive !== 'y') {
      return { success: false, error: '此優惠券已停用' };
    }

    // 檢查優惠券是否在有效期內
    const startDateIndex = headers.indexOf('start day') !== -1 ? headers.indexOf('start day') : headers.indexOf('startDate');
    const endDateIndex = headers.indexOf('end day') !== -1 ? headers.indexOf('end day') : headers.indexOf('endDate');
    
    const today = new Date();
    const startDate = couponRow[startDateIndex];
    const endDate = couponRow[endDateIndex];

    // 檢查開始日期
    if (startDate && startDate !== '') {
      const start = new Date(startDate);
      if (today < start) {
        return { success: false, error: '此優惠券尚未生效' };
      }
    }

    // 檢查結束日期
    if (endDate && endDate !== '') {
      const end = new Date(endDate);
      if (today > end) {
        return { success: false, error: '此優惠券已過期' };
      }
    }

    // 獲取折扣信息
    const discountTypeIndex = headers.indexOf('discount type') !== -1 ? headers.indexOf('discount type') : headers.indexOf('discountType');
    const discountValueIndex = headers.indexOf('discount value') !== -1 ? headers.indexOf('discount value') : headers.indexOf('discountValue');
    
    const discountType = couponRow[discountTypeIndex];
    const discountValue = couponRow[discountValueIndex];

    return {
      success: true,
      coupon: {
        code: couponCode,
        discountType: discountType,
        discountValue: discountValue
      }
    };

  } catch (error) {
    Logger.log('驗證優惠券時出錯: ' + error.toString());
    return { success: false, error: '驗證優惠券時出錯' };
  }
}

/**
 * 提交新預訂
 */
function submitBooking(bookingData) {
  try {
    // 添加收到數據的日志
    Logger.log('收到預訂數據: ' + JSON.stringify(bookingData));
    
    // 验证必要字段
    const requiredFields = ['checkInDate', 'checkOutDate', 'roomId', 'guestName', 'guestPhone', 'guestEmail'];
    for(const field of requiredFields) {
      if(!bookingData[field]) {
        return { error: `缺少必要字段: ${field}` };
      }
    }

    // 如果有優惠券，驗證優惠券
    let couponCode = '';
    if (bookingData.couponCode) {
      const couponValidation = validateCoupon(bookingData.couponCode);
      if (!couponValidation.success) {
        return { error: couponValidation.error };
      }
      couponCode = bookingData.couponCode;
    }
    
    // 檢查此時间段是否有可用房间
    const availabilityCheck = checkAvailability(bookingData.checkInDate, bookingData.checkOutDate);
    if(availabilityCheck.error) {
      return availabilityCheck;
    }
    
    const roomAvailability = availabilityCheck.availability.find(room => room.id === bookingData.roomId);

    // 添加日誌
    Logger.log(`檢查房型 ${bookingData.roomId} 的可用性: ${JSON.stringify(roomAvailability)}`);

    if(!roomAvailability || roomAvailability.available <= 0) {
      return { error: '所選房型在此日期范围内已無可用房间' };
    }
    
    // 生成預訂ID
    const bookingId = 'BK' + new Date().getTime().toString().slice(-6) + Math.floor(Math.random() * 10000).toString().padStart(4, '0');
    
    // 準備要写入的預訂數據
    const bookingSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(BOOKINGS_SHEET_NAME);
    const headers = bookingSheet.getRange(1, 1, 1, bookingSheet.getLastColumn()).getValues()[0];
    
    // 创建要添加的行數據
    const newRow = [];
    
    // 保证數據按正確的列顺序添加
    headers.forEach((header) => {
      switch(header) {
        case 'bookingId':
          newRow.push(bookingId);
          break;
        case 'bookingDate':
          newRow.push(new Date());
          break;
        case 'status':
          newRow.push('待確認');
          break;
        case 'coupon':
          newRow.push(couponCode);
          break;
        default:
          // 从提交的數據中找到相应的字段值
          const field = bookingData[header] || '';
          newRow.push(field);
      }
    });
    
    // 添加新行
    bookingSheet.appendRow(newRow);
    
    // 記錄日期信息并更新可用性表
    Logger.log('更新可用性: 入住日期=' + bookingData.checkInDate + ', 退房日期=' + bookingData.checkOutDate);
    updateAvailability(bookingData.roomId, bookingData.checkInDate, bookingData.checkOutDate, -1);
    
    // 發送確認信件（如果有需要）
    sendConfirmationEmail(bookingData, bookingId);
    
    // 返回成功信息，包含关键數據
    return { 
      success: true, 
      message: '預訂成功！', 
      bookingId,
      // 返回重要信息，客户端可能需要
      checkInDate: bookingData.checkInDate,
      checkOutDate: bookingData.checkOutDate,
      totalPrice: bookingData.totalPrice || 0,
      originalPrice: bookingData.originalPrice || 0,
      discountAmount: bookingData.discountAmount || 0,
      couponCode: couponCode,
      nights: bookingData.nights || 0
    };
  } catch(error) {
    Logger.log('提交預訂時出錯: ' + error.toString());
    return { error: '提交預訂時出錯: ' + error.toString() };
  }
}

/**
 * 取消預訂
 */
function cancelBooking(bookingId) {
  try {
    if(!bookingId) {
      return { error: '缺少預訂ID' };
    }
    
    // 查找預訂記錄
    const bookingSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(BOOKINGS_SHEET_NAME);
    const data = bookingSheet.getDataRange().getValues();
    const headers = data[0];
    
    // 找到預訂ID和状态的列索引
    const bookingIdIndex = headers.indexOf('bookingId');
    const statusIndex = headers.indexOf('status');
    const roomIdIndex = headers.indexOf('roomId');
    const checkInIndex = headers.indexOf('checkInDate');
    const checkOutIndex = headers.indexOf('checkOutDate');
    
    if(bookingIdIndex === -1 || statusIndex === -1) {
      return { error: '預訂表格格式不正確' };
    }
    
    // 查找預訂記錄行
    let rowIndex = -1;
    for(let i = 1; i < data.length; i++) {
      if(data[i][bookingIdIndex] === bookingId) {
        rowIndex = i + 1; // +1 因為表行号从1开始
        break;
      }
    }
    
    if(rowIndex === -1) {
      return { error: '找不到對應預訂記錄' };
    }
    
    // 檢查当前状态是否已是取消
    if(data[rowIndex-1][statusIndex] === '已取消') {
      return { message: '该預訂已经被取消' };
    }
    
    // 更新預訂状态為"已取消"
    bookingSheet.getRange(rowIndex, statusIndex + 1).setValue('已取消');
    
    // 更新房间可用性（恢复被占用的房间）
    const roomId = data[rowIndex-1][roomIdIndex];
    const checkInDate = data[rowIndex-1][checkInIndex];
    const checkOutDate = data[rowIndex-1][checkOutIndex];
    
    if(roomId && checkInDate && checkOutDate) {
      updateAvailability(roomId, checkInDate, checkOutDate, 1);
    }
    
    return { success: true, message: '預訂已成功取消' };
  } catch(error) {
    return { error: '取消預訂時出錯: ' + error.toString() };
  }
}

/**
 * 獲取单個預訂的详细信息
 */
function getBooking(bookingId) {
  try {
    if(!bookingId) {
      return { error: '缺少預訂ID' };
    }
    
    // 查找預訂記錄
    const bookingSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(BOOKINGS_SHEET_NAME);
    const data = bookingSheet.getDataRange().getValues();
    const headers = data[0];
    
    // 找到預訂ID的列索引
    const bookingIdIndex = headers.indexOf('bookingId');
    
    if(bookingIdIndex === -1) {
      return { error: '預訂表格格式不正確' };
    }
    
    // 查找對應的預訂行
    let bookingRow = null;
    for(let i = 1; i < data.length; i++) {
      if(data[i][bookingIdIndex] === bookingId) {
        bookingRow = data[i];
        break;
      }
    }
    
    if(!bookingRow) {
      return { error: '找不到對應預訂記錄' };
    }
    
    // 将行數據轉换為对象
    const booking = {};
    headers.forEach((header, index) => {
      booking[header] = bookingRow[index];
    });
    
    return { success: true, booking };
  } catch(error) {
    return { error: '獲取預訂信息時出錯: ' + error.toString() };
  }
}

/**
 * 更新可用性表
 * @param {string} roomId - 房型ID
 * @param {string} checkInDate - 入住日期
 * @param {string} checkOutDate - 退房日期
 * @param {number} change - 变化量（-1表示預訂，+1表示取消）
 */
function updateAvailability(roomId, checkInDate, checkOutDate, change) {
  try {
    const availabilitySheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(AVAILABILITY_SHEET_NAME);
    const data = availabilitySheet.getDataRange().getValues();
    const headers = data[0];
    
    // 找到房型對應的列索引
    const columnIndex = headers.indexOf(roomId);
    if(columnIndex === -1) {
      throw new Error('找不到對應的房型列');
    }
    
    // 記錄原始输入日期
    Logger.log('原始入住日期字符串: ' + checkInDate);
    Logger.log('原始退房日期字符串: ' + checkOutDate);
    
    // 严格按照YYYY-MM-DD格式解析日期，確保正確時区
    let checkIn, checkOut;
    
    // 处理YYYY-MM-DD格式的日期
    if(typeof checkInDate === 'string' && checkInDate.includes('-')) {
      const [year, month, day] = checkInDate.split('-').map(num => parseInt(num));
      // 注意：JavaScript中月份是0-11，所以需要减1
      checkIn = new Date(year, month - 1, day);
    } else {
      checkIn = new Date(checkInDate);
    }
    
    if(typeof checkOutDate === 'string' && checkOutDate.includes('-')) {
      const [year, month, day] = checkOutDate.split('-').map(num => parseInt(num));
      // 注意：JavaScript中月份是0-11，所以需要减1
      checkOut = new Date(year, month - 1, day);
    } else {
      checkOut = new Date(checkOutDate);
    }
    
    // 使用formatDate確保日期格式正確
    const formattedCheckIn = Utilities.formatDate(checkIn, 'GMT+8', 'yyyy-MM-dd');
    const formattedCheckOut = Utilities.formatDate(checkOut, 'GMT+8', 'yyyy-MM-dd');
    
    // 增加日志以便调试
    Logger.log('更新可用性: 房型=' + roomId + 
               ', 解析后入住=' + formattedCheckIn + 
               ', 解析后退房=' + formattedCheckOut + 
               ', 变化=' + change);
    
    // 遍期日期范围内的每一天
    for(let d = new Date(checkIn); d < checkOut; d.setDate(d.getDate() + 1)) {
      const dateString = Utilities.formatDate(d, 'GMT+8', 'yyyy-MM-dd');
      Logger.log('处理日期: ' + dateString);
      
      // 查找日期行
      let rowIndex = -1;
      for(let i = 1; i < data.length; i++) {
        const rowDate = data[i][0];
        
        // 增加日期比较的方式
        let rowDateStr = '';
        
        // 日期可能是Date对象
        if(rowDate instanceof Date) {
          rowDateStr = Utilities.formatDate(rowDate, 'GMT+8', 'yyyy-MM-dd');
        } 
        // 日期可能是字符串
        else if(typeof rowDate === 'string') {
          // 嘗试轉换為標準格式
          if(rowDate.includes('-')) {
            rowDateStr = rowDate;
          } else {
            try {
              const parsedDate = new Date(rowDate);
              if(!isNaN(parsedDate.getTime())) {
                rowDateStr = Utilities.formatDate(parsedDate, 'GMT+8', 'yyyy-MM-dd');
              }
            } catch(e) {
              continue;
            }
          }
        }
        
        Logger.log('比较: 表格日期=' + rowDateStr + ' 与 目標日期=' + dateString);
        if(rowDateStr === dateString) {
          rowIndex = i + 1; // +1 因為表行号从1开始
          Logger.log('找到匹配行: ' + rowIndex);
          break;
        }
      }
      
      if(rowIndex === -1) {
        // 如果找不到日期行，则添加新行
        Logger.log('未找到日期' + dateString + '的行，添加新行');
        const newRow = Array(headers.length).fill('');
        newRow[0] = new Date(d);
        
        // 獲取该房型的总房间數
        const roomInfoSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(ROOM_INFO_SHEET_NAME);
        const roomData = roomInfoSheet.getDataRange().getValues();
        const roomHeaders = roomData[0];
        const roomIdIndex = roomHeaders.indexOf('roomId') !== -1 ? roomHeaders.indexOf('roomId') : roomHeaders.indexOf('id');
        const totalRoomsIndex = roomHeaders.indexOf('totalRooms');
        
        let defaultValue = 0;
        if(totalRoomsIndex !== -1 && roomIdIndex !== -1) {
          for(let i = 1; i < roomData.length; i++) {
            if(roomData[i][roomIdIndex] === roomId) {
              defaultValue = roomData[i][totalRoomsIndex];
              break;
            }
          }
        }
        
        newRow[columnIndex] = defaultValue + change;
        availabilitySheet.appendRow(newRow);
      } else {
        // 更新现有行
        const currentValue = data[rowIndex-1][columnIndex];
        Logger.log('更新现有行: 行=' + rowIndex + ', 当前值=' + currentValue);
        const newValue = typeof currentValue === 'number' ? currentValue + change : (isNaN(parseInt(currentValue)) ? change : parseInt(currentValue) + change);
        availabilitySheet.getRange(rowIndex, columnIndex + 1).setValue(Math.max(0, newValue));
        Logger.log('已更新: 新值=' + Math.max(0, newValue));
      }
    }
    
    return true;
  } catch(error) {
    Logger.log('更新可用性時出錯: ' + error.toString());
    return false;
  }
}

/**
 * 發送預訂確認信件
 */
function sendConfirmationEmail(bookingData, bookingId) {
  try {
    const { guestName, guestEmail, roomId, checkInDate, checkOutDate } = bookingData;
    
    // 獲取房型信息
    const roomInfoSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(ROOM_INFO_SHEET_NAME);
    const roomData = roomInfoSheet.getDataRange().getValues();
    const roomHeaders = roomData[0];
    const roomIdIndex = roomHeaders.indexOf('roomId') !== -1 ? roomHeaders.indexOf('roomId') : roomHeaders.indexOf('id');
    const roomNameIndex = roomHeaders.indexOf('roomName') !== -1 ? roomHeaders.indexOf('roomName') : roomHeaders.indexOf('name');
    
    let roomName = roomId;
    if(roomIdIndex !== -1 && roomNameIndex !== -1) {
      for(let i = 1; i < roomData.length; i++) {
        if(roomData[i][roomIdIndex] === roomId) {
          roomName = roomData[i][roomNameIndex];
          break;
        }
      }
    }
    
    // 準備信件内容
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);
    const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
    
    const subject = `JI Space - 預訂確認 (訂單號碼: ${bookingId})`;
    
    const body = `
    <p>您好 ${guestName}，</p>

      <p>感谢您選擇我們 JI Space！已成功提交您的預訂，目前訂單狀態為"確認中"。<br>
      請先匯款以完成您的預訂，我們將在確認收款後，通知您入住細節。</p>

      <p>匯款資訊：<br>
      ------------------------------<br>
      銀行：國泰世華銀行（013）<br>
      帳號：2187 0009 8325<br>
      戶名：莊茹絜</p>

      <p>或使用 Line Pay 付款，請掃描以下 QRCODE：<br>
      <img src="https://drive.google.com/uc?export=view&id=15-rEttNDPD2XHWs_WsopBmfAod1nwoIk"
          alt="Line Pay QRCODE" width="200" /></p>

      <p>為了加速訂單處理，我們建議您匯款完成後，通知我們<br>
      以下為我們的官方Line：<br>
      <a href="https://line.me/R/ti/p/@763foyrq">https://line.me/R/ti/p/@763foyrq</a></p>

      <p>訂單詳情：<br>
      -------------------------------------<br>
      訂單號碼: ${bookingId}<br>
      房型: ${roomName}<br>
      入住日期: ${Utilities.formatDate(checkIn, 'GMT+8', 'yyyy年MM月dd日')}<br>
      退房日期: ${Utilities.formatDate(checkOut, 'GMT+8', 'yyyy年MM月dd日')}<br>
      住宿晚數: ${nights} 晚</p>

      <p>如果您有任何問題需要協助：<br>
      電話: 0901 255 029<br>
      聯絡信箱: jispace.tw@gmail.com</p>

      <p>期待您的到來！<br>
      JI Space</p>
    `;
    // 發送給客戶的確認信件
    MailApp.sendEmail({
      to: guestEmail,
      subject: subject,
      htmlBody: body 
    });
    
    // 發送給管理員的通知信件
    const adminSubject = `【新預訂通知】${guestName} - ${bookingId}`;
    const adminBody = `
      有新的預訂！

      訂單詳情:
      -------------------------------------
      訂單號碼: ${bookingId}
      客戶姓名: ${guestName}
      客戶Email: ${guestEmail}
      客戶電話: ${bookingData.guestPhone || '未提供'}
      房型: ${roomName}
      入住日期: ${Utilities.formatDate(checkIn, 'GMT+8', 'yyyy年MM月dd日')}
      退房日期: ${Utilities.formatDate(checkOut, 'GMT+8', 'yyyy年MM月dd日')}
      住宿晚數: ${nights}晚
      備註: ${bookingData.specialRequests || '無'}
    `;
    
    MailApp.sendEmail({
      to: "jispace.tw@gmail.com",
      subject: adminSubject,
      body: adminBody
    });
    
    return true;
  } catch(error) {
    Logger.log('發送確認信時出錯: ' + error.toString());
    return false;
  }
}

/**
 * 檢查日期范围内每一天的房型可用性（用于日期显示）
 */
function checkAvailabilityCalendar(checkInDate, checkOutDate) {
  // 验证日期
  if(!checkInDate || !checkOutDate) {
    return { error: '入住和退房日期不能為空' };
  }
  
  try {
    // 日志输出用于调试
    Logger.log('獲取日期可用性: 开始=' + checkInDate + ', 结束=' + checkOutDate);
    
    // 轉换日期格式
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);
    
    // 獲取可用性表
    const availabilitySheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(AVAILABILITY_SHEET_NAME);
    const availabilityData = availabilitySheet.getDataRange().getValues();
    
    // 提取表头和數據行
    const headers = availabilityData[0];
    const rows = availabilityData.slice(1);
    
    // 查找所有房型列的索引
    const roomIndices = {};
    headers.forEach((header, index) => {
      if(header && header !== 'date') {
        roomIndices[header] = index;
      }
    // 添加日誌
    Logger.log(`找到房型列: ${header} 在索引 ${index}`);
    });
    
    Logger.log('找到房型索引: ' + JSON.stringify(roomIndices));
    
    // 初始化结果对象
    const result = {};
    
    // 遍期日期范围内的每一天
    for(let d = new Date(checkIn); d < checkOut; d.setDate(d.getDate() + 1)) {
      const dateString = Utilities.formatDate(d, 'GMT+8', 'yyyy-MM-dd');
      
      // 初始化当前日期的可用性數據
      result[dateString] = {};
      
      // 在可用性表中查找對應日期的行
      let rowFound = false;
      for(let i = 0; i < rows.length; i++) {
        const rowDate = rows[i][0];
        let rowDateStr = '';
        
        // 確保rowDate是日期类型
        if(rowDate instanceof Date) {
          rowDateStr = Utilities.formatDate(rowDate, 'GMT+8', 'yyyy-MM-dd');
        } else if(typeof rowDate === 'string') {
          try {
            const parsedDate = new Date(rowDate);
            rowDateStr = Utilities.formatDate(parsedDate, 'GMT+8', 'yyyy-MM-dd');
          } catch(e) {
            continue;
          }
        }
        
        // 如果找到匹配的日期行
        if(rowDateStr === dateString) {
          // 為每個房型獲取可用數量
          Object.keys(roomIndices).forEach(roomId => {
            const columnIndex = roomIndices[roomId];
            result[dateString][roomId] = rows[i][columnIndex] || 0;
          });
          
          rowFound = true;
          break;
        }
      }
      
      // 如果在表中找不到该日期，则默認所有房型為0
      if(!rowFound) {
        Object.keys(roomIndices).forEach(roomId => {
          result[dateString][roomId] = 0;
        });
      }
    }
    
    return {
      success: true,
      availabilityData: result
    };
    
  } catch(error) {
    Logger.log('獲取日期可用性時出錯: ' + error.toString());
    return { error: '獲取日期可用性時出錯: ' + error.toString() };
  }
}

/**
 * 测试函數，用于在部署前测试脚本
 */
function test() {
  // 测试獲取房型信息
  const roomInfo = getRoomInfo();
  Logger.log('房型信息: ' + JSON.stringify(roomInfo));
  
  // 测试檢查可用性
  const today = new Date();
  const tomorrow = new Date();
  tomorrow.setDate(today.getDate() + 1);
  
  const checkInStr = Utilities.formatDate(today, 'GMT+8', 'yyyy-MM-dd');
  const checkOutStr = Utilities.formatDate(tomorrow, 'GMT+8', 'yyyy-MM-dd');
  
  const availability = checkAvailability(checkInStr, checkOutStr);
  Logger.log('可用性檢查: ' + JSON.stringify(availability));
} 